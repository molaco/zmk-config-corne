/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

// #define ZMK_POINTING_DEFAULT_MOVE_VAL 1500
// #define ZMK_POINTING_DEFAULT_SCRL_VAL 20

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
// #include <dt-bindings/zmk/outputs.h>
// #include <dt-bindings/zmk/ext_power.h>
// #include <dt-bindings/led/led.h>
// #include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/rgb.h>
// #include <dt-bindings/zmk/reset.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT 0
#define SYM     1
#define NAV     2
#define NUM     3
#define MISC    4
#define MOUSE   5

// &led_strip {
//     chain-length = <27>;
// };

/ {
    // conditional_layers {
    //     compatible = "zmk,conditional-layers";
    //     tri_layer {
    //         if-layers = <1 2>;
    //         then-layer = <3>;
    //     };
    // };

    behaviors {
      skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <1000>;
        quick-release;
        ignore-modifiers;
      };
    };

    keymap {
        compatible = "zmk,keymap";

        // QWERTY Layer (default, equivalent to _QWERTY)
        qwerty_layer {
            bindings = <
                &kp ESC   &kp Q     &kp W     &kp E     &kp R      &kp T       &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
                &kp LSHFT &kp A     &kp S     &kp D     &kp F      &kp G       &kp H     &kp J     &kp K     &kp L     &kp TILDE &kp RET
                &kp LCTRL &kp Z     &kp X     &kp C     &kp V      &kp B       &kp N     &kp M     &kp COMMA &kp DOT   &kp FSLH  &kp CAPS
                                    &kp LSHFT &mo NAV   &kp LCTRL  &kp SPACE   &mo SYM   &kp RET
            >;
        };

        // Symbol Layer (equivalent to _SYM)
        sym_layer {
            bindings = <
                &trans    &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT  &kp FSLH  &kp LPAR  &kp RPAR  &kp QMARK &none     &trans
                &trans    &kp PIPE  &kp SQT   &kp DQT   &kp SEMI  &kp COLON  &kp BSLH  &kp LBKT  &kp RBKT  &kp AMPS  &kp TILDE &trans
                &trans    &kp LT    &kp GT    &none     &kp MINUS &kp UNDER  &kp CARET &kp LBRC  &kp RBRC  &none     &none     &trans
                                    &trans    &trans    &trans    &trans     &trans    &trans
            >;
        };

        // Navigation Layer (equivalent to _NAV)
        nav_layer {
            bindings = <
                // &trans    &kp ESC    &none       &tog MOUSE &tog MISC &kp C_PP  &kp BSPC  &none     &kp HOME  &kp END   &none &none
                &trans    &kp ESC    &none       &none      &none     &kp K_PP  &kp BSPC  &none     &kp HOME  &kp END   &none    &none
                &trans    &skq LSHFT &skq LCTRL  &skq LALT  &skq LGUI &kp TAB   &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT &none    &none
                &trans    &none      &none       &none      &none     &none     &kp RET   &none     &kp PG_UP &kp PG_DN &kp CAPS &none
                                     &trans      &trans     &trans    &trans    &trans    &trans
            >;
        };


        // // Number Layer (equivalent to _NUMB)
        // num_layer {
        //     bindings = <
        //         &trans    &kp N1     &kp N2     &kp N3     &kp N4     &kp N5    &kp N6    &kp N7      &kp N8    &kp N9    &kp N0 &trans
        //         &trans    &skq LSHFT &skq LCTRL &skq LALT  &skq LGUI  &kp F11   &kp F12   &kp KP_PLUS &kp EQUAL &kp ASTRK &none  &trans
        //         &trans    &kp F1     &kp F2     &kp F10    &kp DEL    &none     &none     &kp MINUS   &none     &none     &none  &trans
        //                              &trans     &trans     &trans     &trans    &trans    &trans
        //     >;
        // };

        // misc_layer {
        //     bindings = <
        //         &none &none           &none           &none          &tog DEFAULT    &none        &none &none &none &none &none &none
        //         &none &bt BT_CLR      &bt BT_SEL 0    &bt BT_SEL 1   &bt BT_SEL 2    &bt BT_SEL 3 &none &none &none &none &none &none
        //         &none &rgb_ug RGB_TOG &rgb_ug RGB_OFF &rgb_ug RGB_ON &rgb_ug RGB_BRI &none        &none &none &none &none &none &none
        //                                                                  &none &none &none        &none &none &none
        //     >;
        // };

        // mouse_layer {
        //     bindings = <
        //          &none &none &none          &mmv MOVE_UP   &none           &msc SCRL_UP     &none &none &none &none &none &none
        //          &none &none &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &msc SCRL_DOWN   &none &none &none &none &none &none 
        //          &none &none &none          &none          &none           &none            &none &none &none &none &none &none 
        //                                     &none          &MB1            &MB2             &none &none &none
        //     >;
        // };
    };
};
